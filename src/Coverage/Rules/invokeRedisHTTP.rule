/**
 * @description fetch effective dates of a coverage from cache by calling REST API. 
 *   Alternatively for better performance, configure the CACHE_TYPE to use direct Lambda function call.
 * @author Playing-Branes.local
 */
rule Rules.invokeRedisHTTP {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		Events.CoverageRequest evt;
		Concepts.CoverageStatus cov;
	}
	when {
		Config.CacheType == Config.RedisHTTP;
		evt.uuid == cov.reqUuid;
		cov.effectiveDate == "";
	}
	then {
		Object logger = Log.getLogger("invokeRedisHTTP");
		String cacheUrl = System.getGlobalVariableAsString("REDIS_HTTP_URL", "");
		String req = cacheUrl + "?key=" + cov.reference;
		Log.log(logger, "info", "Send cache request: %s", req);
		try {
			long startTime = System.currentTimeMillis();
			Events.CacheRequest resp = HTTP.sendRequest(req, 
				Events.CacheRequest.CacheRequest(null, null), "/Events/CacheRequest", 5000, 
				HTTP.ConnectionInfo.createHTTPConnectionInfo(true));
			Log.log(logger, "info", "Cache query elapsed time %d ms", (System.currentTimeMillis() - startTime) );
			Log.log(logger, "info", "Received cache response: %s", resp@payload);
			String[] tokens = String.split(resp@payload, ",");
			if (tokens@length == 3) {
				cov.effectiveDate = tokens[1];
				cov.expireDate = tokens[2];
				Log.log(logger, "info", "Set coverage effective period [%s, %s]", cov.effectiveDate, cov.expireDate);
			} else {
				Log.log(logger, "info", "Invalid cache value for key %s: %s", cov.reference, resp@payload);
				cov.inforce = false;
			}
		} catch (Exception e) {
			Log.logException(logger, "error", "Failed to check Redis cache", e);
			cov.inforce = false;
		}
	}
}